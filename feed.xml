<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://brakemanscanner.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://brakemanscanner.org/" rel="alternate" type="text/html" /><updated>2025-09-04T22:02:10-06:00</updated><id>https://brakemanscanner.org/feed.xml</id><title type="html">Brakeman</title><entry><title type="html">Brakeman 7.1.0 Released</title><link href="https://brakemanscanner.org/blog/2025/07/18/brakeman-7-dot-1-dot-0-released" rel="alternate" type="text/html" title="Brakeman 7.1.0 Released" /><published>2025-07-18T00:00:00-06:00</published><updated>2025-07-18T00:00:00-06:00</updated><id>https://brakemanscanner.org/blog/2025/07/18/brakeman-7-dot-1-dot-0-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2025/07/18/brakeman-7-dot-1-dot-0-released">&lt;h2 id=&quot;haml-6-support&quot;&gt;Haml 6 Support&lt;/h2&gt;

&lt;p&gt;Brakeman now ships with and supports Haml 6.&lt;/p&gt;

&lt;p&gt;To continue using Brakeman with Haml 5.x, please use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brakeman-lib&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brakeman-min&lt;/code&gt; gems.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1944&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;render-shortcuts&quot;&gt;Render Shortcuts&lt;/h2&gt;

&lt;p&gt;After many, many years, Brakeman now supports shortcuts where specific models or collections are rendered. For example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render User.find(..)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render User.all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brakeman does not currently support rendering of collections with mixed types of models.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1948&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;fail-on-obsolete-ignored-warnings&quot;&gt;Fail on Obsolete Ignored Warnings&lt;/h2&gt;

&lt;p&gt;When Brakeman is configured to ignore warnings, but then those warnings aren’t found, Brakeman reports “obsolete ignored warnings”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/viralpraxis&quot;&gt;viralpraxis&lt;/a&gt; added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ensure-no-obsolete-config-entries&lt;/code&gt; option to return a failure exit code if there are obsolete entries.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1921&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;junit-report-for-circleci&quot;&gt;JUnit Report for CircleCI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pbernery&quot;&gt;Philippe Bernery&lt;/a&gt; has fixed JUnit reports to be compatible with CircleCI (again). Thanks!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1934&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;better-ignored-warnings-layout&quot;&gt;Better Ignored Warnings Layout&lt;/h2&gt;

&lt;p&gt;Speaking of ignored warnings, &lt;a href=&quot;https://github.com/inkstak&quot;&gt;Sebastien Savater&lt;/a&gt; has improved the layout in the HTML report to make it easier to read notes for ignored warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1941&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;cgi-loading&quot;&gt;CGI Loading&lt;/h2&gt;

&lt;p&gt;In preparation for &lt;a href=&quot;https://bugs.ruby-lang.org/issues/21258&quot;&gt;Ruby 3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/Earlopain&quot;&gt;Earlopain&lt;/a&gt; updated Brakeman to explcitly load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgi/escape&lt;/code&gt; instead of the entire CGI library.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1938&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;lazy-file-lists&quot;&gt;Lazy File Lists&lt;/h2&gt;

&lt;p&gt;Use lazy file lists when managing files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Brakeman::AppTree&lt;/code&gt;. This provides a small (~9%) speed improvement for large applications.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1913&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;reporting-issues&quot;&gt;Reporting Issues&lt;/h2&gt;

&lt;p&gt;Thank you to everyone who reported bugs and contributed to this release!&lt;/p&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release. Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Hang out &lt;a href=&quot;https://github.com/presidentbeef/brakeman/discussions&quot;&gt;on Github&lt;/a&gt; for questions and discussion.&lt;/p&gt;</content><author><name></name></author><summary type="html">Haml 6 Support</summary></entry><entry><title type="html">Brakeman 7.0.2 Released</title><link href="https://brakemanscanner.org/blog/2025/04/04/brakeman-7-dot-0-dot-2-released" rel="alternate" type="text/html" title="Brakeman 7.0.2 Released" /><published>2025-04-04T11:00:00-06:00</published><updated>2025-04-04T11:00:00-06:00</updated><id>https://brakemanscanner.org/blog/2025/04/04/brakeman-7-dot-0-dot-2-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2025/04/04/brakeman-7-dot-0-dot-2-released">&lt;h2 id=&quot;error-on-empty-environment-variable&quot;&gt;Error on Empty Environment Variable&lt;/h2&gt;

&lt;p&gt;Fixed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1932&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Error on Empty Environment Variable</summary></entry><entry><title type="html">Brakeman 7.0.1 Released</title><link href="https://brakemanscanner.org/blog/2025/04/03/brakeman-7-dot-0-dot-1-released" rel="alternate" type="text/html" title="Brakeman 7.0.1 Released" /><published>2025-04-03T17:00:00-06:00</published><updated>2025-04-03T17:00:00-06:00</updated><id>https://brakemanscanner.org/blog/2025/04/03/brakeman-7-dot-0-dot-1-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2025/04/03/brakeman-7-dot-0-dot-1-released">&lt;h2 id=&quot;fewer-code-evaluation-warnings&quot;&gt;Fewer Code Evaluation Warnings&lt;/h2&gt;

&lt;p&gt;Brakeman will warn on fewer cases of code evaluation of dynamic strings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1920&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;custom-gemfile&quot;&gt;Custom Gemfile&lt;/h2&gt;

&lt;p&gt;Which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; to scan can now be configured with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--gemfile&lt;/code&gt; or setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUNDLE_GEMFILE&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1912&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;errors-matching-directory-names&quot;&gt;Errors Matching Directory Names&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/viralpraxis&quot;&gt;viralpraxis&lt;/a&gt; for fixing an issue where directory names ending in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rb&lt;/code&gt; were treated like Ruby files.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1911&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;support-for-terminal-table-40&quot;&gt;Support for Terminal Table 4.0&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/chaadow&quot;&gt;Chedli Bourguiba&lt;/a&gt; for helping bump the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terminal-table&lt;/code&gt; dependency to allow use of the latest version.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1917&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;frozen-strings-in-prism&quot;&gt;Frozen Strings in Prism&lt;/h2&gt;

&lt;p&gt;This release fixes some compatibility with frozen strings in Prism 1.4.0.&lt;/p&gt;

&lt;p&gt;These are a little hard to track down, so please report any errors that have not been fixed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1928&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;less-noisy-timing&quot;&gt;Less Noisy Timing&lt;/h2&gt;

&lt;p&gt;Use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--timing&lt;/code&gt; is now a little less noisy unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--debug&lt;/code&gt; is also set.&lt;/p&gt;

&lt;p&gt;Previously, processing time for each individual file was shown. Now the default is to only show processing time for each step in the scan.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1908&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Fewer Code Evaluation Warnings</summary></entry><entry><title type="html">Brakeman LSP Support</title><link href="https://brakemanscanner.org/blog/2025/01/10/brakeman-lsp-support" rel="alternate" type="text/html" title="Brakeman LSP Support" /><published>2025-01-10T09:23:00-07:00</published><updated>2025-01-10T09:23:00-07:00</updated><id>https://brakemanscanner.org/blog/2025/01/10/brakeman-lsp-support</id><content type="html" xml:base="https://brakemanscanner.org/blog/2025/01/10/brakeman-lsp-support">&lt;p&gt;Announcing the &lt;a href=&quot;https://github.com/presidentbeef/ruby-lsp-brakeman&quot;&gt;ruby-lsp-brakeman&lt;/a&gt; project!&lt;/p&gt;

&lt;p&gt;This new gem allows Brakeman scans to be integrated into code editors via &lt;a href=&quot;https://shopify.github.io/ruby-lsp/&quot;&gt;ruby-lsp&lt;/a&gt;. Scans will run asynchronously in the background and warnings will can be shown inline in the editor.&lt;/p&gt;

&lt;h2 id=&quot;using-ruby-lsp-brakeman&quot;&gt;Using Ruby-LSP-Brakeman&lt;/h2&gt;

&lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-lsp-brakeman&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;ruby-lsp-brakeman&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;require: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;in-vs-code&quot;&gt;In VS Code&lt;/h3&gt;

&lt;p&gt;If using with VS Code, make sure to install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp&quot;&gt;Ruby LSP extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; and then restart the Ruby LSP extension to enable the add-on.&lt;/p&gt;

&lt;p&gt;To double-check that Brakeman is running, examine the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; tab in the VS Code panel for output like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[info] (example-app) Finished initializing Ruby LSP!
[info] (example-app) [Brakeman] Activated Ruby LSP Brakeman, running initial scan
[info] (example-app) [Brakeman] Initial Brakeman scan complete - 0 warnings found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When files are saved, there should be logs like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[info] (example-app) [Brakeman] Queued example-app/app/controllers/some_controller.rb
[info] (example-app) [Brakeman] Rescanning example-app/app/controllers/some_controller.rb
[info] (example-app) [Brakeman] Rescanned example-app/app/controllers/some_controller.rb
[info] (example-app) [Brakeman] Warnings: 0 new, 1 fixed, 2 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Findings will show up with squiggly underlines:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqftm3nn87fekg79in2s.png&quot; alt=&quot;Inline Brakeman warning in VS Code&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;background-information&quot;&gt;Background Information&lt;/h2&gt;

&lt;p&gt;Just for those interested in what’s going on behind the scenes!&lt;/p&gt;

&lt;h3 id=&quot;language-server-protocol&quot;&gt;Language Server Protocol&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol (LSP)&lt;/a&gt; is a standard for communication between code editors and code-related tools. It enables tools to hook into standard events for code review, code completion, formatting, etc.&lt;/p&gt;

&lt;p&gt;In the Ruby world, Shopify’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-lsp&lt;/code&gt; provides a convenient implementation of LSP and the ability to build “add-ons” like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-lsp-brakeman&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-brakeman-is-integrated&quot;&gt;How Brakeman is Integrated&lt;/h3&gt;

&lt;p&gt;The Brakeman add-on primarily hooks into the file change monitoring, which is triggered when a file is saved or deleted. The file is then added to a queue for rescanning. All files in the queue will be rescanned in the next scan. This is to avoid either triggering multiple concurrent scans or missing file updates because a scan was already in progress.&lt;/p&gt;

&lt;p&gt;When the scan is complete, the warnings are reported back as a “&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnostic&quot;&gt;diagnostic&lt;/a&gt;” to be displayed in the editor.&lt;/p&gt;

&lt;p&gt;Interestingly, it’s also necessary to return &lt;em&gt;empty&lt;/em&gt; sets of diagnostics (per changed file) to clear any fixed warnings that were previously reported.&lt;/p&gt;

&lt;h3 id=&quot;brakeman-rescanning&quot;&gt;Brakeman Rescanning&lt;/h3&gt;

&lt;p&gt;Unlike some other code review or formatting tools, Brakeman works across the entire application, not one file at a time. Code in one file can have effects elsewhere in the application.&lt;/p&gt;

&lt;p&gt;A long time ago, “rescanning”/incremental scans were added to Brakeman. To achieve this, Brakeman needs to keep the entire state of the scan in memory, then attempt to update only the relevant information as files change. (This is as opposed to running scans on only a subset of files or caching results offline somehow. Side note: do not use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--only-files&lt;/code&gt; to try to make this work!)&lt;/p&gt;

&lt;p&gt;To know what to update internally, Brakeman would try to guess based on the file that changed (including cascading effects). This was always pretty heavy on heuristics and not very well tested. But it kind of mostly worked!&lt;/p&gt;

&lt;p&gt;All the way back in Brakeman 5.0, the scan implementation moved away from using file names and paths to determine the type of file (e.g., controllers vs. models) to using the contents of the file instead. However, the re-scanning was not updated to use this information. Since it was still operating based on file paths, it was no longer aligned with the files being scanned by Brakeman normally.&lt;/p&gt;

&lt;p&gt;What all this means is that rescanning has been in a broken and slowly deteriorating state since Brakeman 5.0!&lt;/p&gt;

&lt;p&gt;With Brakeman 7.0, rescanning has been revised. For now, rescanning focuses on caching parsed files and only re-parsing changed files. The rest of the scan starts from “scratch”. Finding, reading, and parsing files is often one of the slowest parts of scans, so this should still save time for most folks.&lt;/p&gt;

&lt;p&gt;Since caching all the parsed files introduces a bit of memory overhead, the functionality is off by default. To enable, initial scans must be run with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;support_rescanning: true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully future work will be able to expand out the “incremental” part of rescanning again.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h2&gt;

&lt;p&gt;While the add-on generally works with VS Code, I’d love to polish it up a bit more and move to a 1.0 release.&lt;/p&gt;

&lt;p&gt;I’m also considering if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-lsp-brakeman&lt;/code&gt; should depend on Brakeman, or if it should actually be a Brakeman dependency so everyone has it available by default. Let me know if you have thoughts on that.&lt;/p&gt;

&lt;p&gt;Please help by testing out &lt;a href=&quot;https://github.com/presidentbeef/ruby-lsp-brakeman&quot;&gt;ruby-lsp-brakeman&lt;/a&gt; and &lt;a href=&quot;https://github.com/presidentbeef/ruby-lsp-brakeman&quot;&gt;sharing any feedback/bugs&lt;/a&gt;!&lt;/p&gt;</content><author><name></name></author><summary type="html">Announcing the ruby-lsp-brakeman project!</summary></entry><entry><title type="html">Brakeman 7.0.0 Released</title><link href="https://brakemanscanner.org/blog/2024/12/30/brakeman-7-dot-0-dot-0-released" rel="alternate" type="text/html" title="Brakeman 7.0.0 Released" /><published>2024-12-30T21:00:00-07:00</published><updated>2024-12-30T21:00:00-07:00</updated><id>https://brakemanscanner.org/blog/2024/12/30/brakeman-7-dot-0-dot-0-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2024/12/30/brakeman-7-dot-0-dot-0-released">&lt;p&gt;Happy new year!&lt;/p&gt;

&lt;p&gt;This release of Brakeman contains several breaking changes and updates to default behavior.&lt;/p&gt;

&lt;h2 id=&quot;default-to-prism-parser&quot;&gt;Default to Prism Parser&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ruby.github.io/prism/&quot;&gt;Prism&lt;/a&gt; is a new parser that has quickly been adopted across many Ruby implementations and code tools. In Ruby 3.4, it is now the default parser for Ruby itself.&lt;/p&gt;

&lt;p&gt;Thankfully, Prism has also implemented translation layers for RubyParser and other existing parsers. This has allowed Brakeman (and other tools) to adopt Prism fairly easily. Even with the translation layer, Prism is typically a little faster than RubyParser. Line numbers may also shift slightly.&lt;/p&gt;

&lt;p&gt;Brakeman now defaults to using Prism for parsing. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--prism&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-prism&lt;/code&gt; options.&lt;/p&gt;

&lt;p&gt;There are still some small incompatibilities - please report any instances where Brakeman outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Format Error]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1897&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;revert-following-symbolic-links&quot;&gt;Revert Following Symbolic Links&lt;/h2&gt;

&lt;p&gt;For better performance, Brakeman will no longer default to following symbolical links for directories. This behavior was added in Brakeman 6.2.1.&lt;/p&gt;

&lt;p&gt;To re-enable the previous behavior, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--follow-symlinks&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1898&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;drop-timestamp-from-ignore-files&quot;&gt;Drop Timestamp from Ignore Files&lt;/h2&gt;

&lt;p&gt;Brakeman will no longer add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updated&lt;/code&gt; entry when generating or updating an ignore file.&lt;/p&gt;

&lt;p&gt;The entry was redundant with source control and could cause unnecessary merge conflicts.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1860&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;updates-to-rescanning&quot;&gt;Updates to Rescanning&lt;/h2&gt;

&lt;p&gt;“Rescanning” in Brakeman (attempting to only scan changed files) has been broken and out of date for a long time. This release drops a lot of that old code.&lt;/p&gt;

&lt;p&gt;To improve accuracy, rescanning will now only skip the file reading/parsing step for unchanged files. The rest of the scan will continue like a regular full scan.
For many code bases, the read/parse step is the slowest part of the scan. However, it is very likely the current rescanning will be slower (but more accurate) than the old version.&lt;/p&gt;

&lt;p&gt;Hopefully there will be additional improvements in this functionality over time.&lt;/p&gt;

&lt;p&gt;For any tools wanting to use rescanning, the initial scan must set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;support_rescanning: true&lt;/code&gt; to enable caching of the parsed files. After that, the API is the same.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1881&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;globally-excluded-paths&quot;&gt;Globally Excluded Paths&lt;/h2&gt;

&lt;p&gt;Brakeman has a set of paths that it never scans:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  generators/
  lib/tasks/
  lib/templates/
  db/
  spec/
  test/
  tmp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Previously, if any part of the path matched (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; matching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cool-db-adapter&lt;/code&gt;), it would get skipped.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; used to be a skipped path which would match paths like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catalog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This has been fixed to only skip paths with an exact match.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1880&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;more-deserialization-warnings&quot;&gt;More Deserialization Warnings&lt;/h2&gt;

&lt;p&gt;Brakeman will now warn about all uses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Marshal.load&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Marshal.restore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This may be a little noisy, so please feel free to provide feedback on false positives.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1902&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;more-eval-warnings&quot;&gt;More Eval Warnings&lt;/h2&gt;

&lt;p&gt;Brakeman will now warn about evaluation of dynamic strings, even if there is no obvious user-controllable input.&lt;/p&gt;

&lt;p&gt;In addition, Brakeman will warn about most uses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This may be a little noisy, so please feel free to provide feedback on false positives.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1899&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;sarif-reports&quot;&gt;SARIF Reports&lt;/h2&gt;

&lt;p&gt;SARIF reports output from Brakeman will now include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;originalBaseUriIds&lt;/code&gt; property to enable using of absolute file paths inside of the report. This should enhance compatibility with GitHub and other tools.&lt;/p&gt;

&lt;p&gt;See the (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1890&quot;&gt;changes&lt;/a&gt;) for details of how this interacts with scan paths.&lt;/p&gt;

&lt;h2 id=&quot;step-for-finding-files&quot;&gt;Step for Finding Files&lt;/h2&gt;

&lt;p&gt;For large applications, just listing out relevant files for Brakeman to scan can take some time.&lt;/p&gt;

&lt;p&gt;This step was previously “invisible” but now Brakeman will output &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finding files...&lt;/code&gt; as a descrete step which also means it will work with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--timing&lt;/code&gt; option to display how long that step takes.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1896&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;dependency-updates&quot;&gt;Dependency Updates&lt;/h2&gt;

&lt;p&gt;Brakeman no longer restricts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terminal-table&lt;/code&gt; to an old version.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1901&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csv&lt;/code&gt; is now an explicit dependency since it has moved to a bundled gem in Ruby 3.4.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1893&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The minimum Ruby version to run Brakeman is now Ruby 3.1.0.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1888&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Happy new year!</summary></entry><entry><title type="html">Brakeman 6.2.2 Released</title><link href="https://brakemanscanner.org/blog/2024/10/18/brakeman-6-dot-2-dot-2-released" rel="alternate" type="text/html" title="Brakeman 6.2.2 Released" /><published>2024-10-18T05:00:00-06:00</published><updated>2024-10-18T05:00:00-06:00</updated><id>https://brakemanscanner.org/blog/2024/10/18/brakeman-6-dot-2-dot-2-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2024/10/18/brakeman-6-dot-2-dot-2-released">&lt;p&gt;Small release!&lt;/p&gt;

&lt;h2 id=&quot;command-injection-in-pipeline_-calls&quot;&gt;Command Injection in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_*&lt;/code&gt; calls&lt;/h2&gt;

&lt;p&gt;More specific checks for arguments to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open3&lt;/code&gt; methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipline_r&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_rw&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_w&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline_start&lt;/code&gt; to improve
both true and false positive rates.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1868&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;updated-end-of-support-dates-for-rails&quot;&gt;Updated End of Support Dates for Rails&lt;/h2&gt;

&lt;p&gt;Updated based on the &lt;a href=&quot;https://rubyonrails.org/maintenance&quot;&gt;updated&lt;/a&gt; &lt;a href=&quot;https://rubyonrails.org/2024/10/15/new-maintenance-policy-and-eol-annouments&quot;&gt;policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, timing of this Brakeman release means Brakeman is already warning about Rails 6.1 end-of-support (ended October 1st).&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1843&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Small release!</summary></entry><entry><title type="html">Brakeman 6.2.1 Released</title><link href="https://brakemanscanner.org/blog/2024/08/22/brakeman-6-dot-2-released" rel="alternate" type="text/html" title="Brakeman 6.2.1 Released" /><published>2024-08-22T10:30:00-06:00</published><updated>2024-08-22T10:30:00-06:00</updated><id>https://brakemanscanner.org/blog/2024/08/22/brakeman-6-dot-2-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2024/08/22/brakeman-6-dot-2-released">&lt;p&gt;Lots of great contributions in this release, thanks!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What happened to 6.2.0? Packaging issue! No other changes.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;optional-support-for-prism-parser&quot;&gt;Optional Support for Prism Parser&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ruby.github.io/prism/&quot;&gt;Prism&lt;/a&gt; is a new Ruby parsing library which is intended to bring together all the various Ruby parsing libraries together.&lt;/p&gt;

&lt;p&gt;This release adds optional support for the Prism parser.&lt;/p&gt;

&lt;p&gt;To enable use of Prism, install it directly or add it to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;. Then enable it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--prism&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1858&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;parallel-assignment-with-splats&quot;&gt;Parallel Assignment with Splats&lt;/h2&gt;

&lt;p&gt;Support splats in parallel assignments like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1843&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;unscoped-finds-with-find_by&quot;&gt;Unscoped Finds with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_by!&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Warn about insecure direct object references in code using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_by!&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1859&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;initial-rails-8-support&quot;&gt;Initial Rails 8 Support&lt;/h2&gt;

&lt;p&gt;While there is no specific behavior added yet for Rails 8, Brakeman will detect it properly and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-8&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--rails8&lt;/code&gt; options have been added.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/ron-shinall&quot;&gt;Ron Shinall&lt;/a&gt; for proactively adding this functionality.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1846&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;support-for-symbolic-links&quot;&gt;Support for Symbolic Links&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/lubert&quot;&gt;Lu Zhu&lt;/a&gt;, Brakeman will now follow symbolic links for directories - in particular links to files outside of the root directory of the Rails application.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1828&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;yaml-aliases-in-secrets-config&quot;&gt;YAML Aliases in Secrets Config&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chaadow&quot;&gt;Chedli Bourguiba&lt;/a&gt; enabled support for use of aliases in secrets configuration files.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1847&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;option-to-show-ignored-warnings-in-text-report&quot;&gt;Option to Show Ignored Warnings in Text Report&lt;/h2&gt;

&lt;p&gt;In response to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/1767&quot;&gt;this request&lt;/a&gt;, &lt;a href=&quot;https://github.com/gazayas&quot;&gt;Gabriel Arcangel Zayas&lt;/a&gt; added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--show-ignored&lt;/code&gt; option to
list ignored warnings in the default text report.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ignored_warnings_example.png&quot; alt=&quot;Ignored warnings in text report&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1861&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;top-level-constants&quot;&gt;Top-Level Constants&lt;/h2&gt;

&lt;p&gt;While it may be semantically incorrect, Brakeman will now treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::Foo&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt; the same. This helps when matching against known constants like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewComponent::Base&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::ViewComponent::Base&lt;/code&gt;. Thanks to &lt;a href=&quot;https://github.com/that-jill&quot;&gt;Jill Klang&lt;/a&gt; for addressing this one.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1838&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;remediation-advice-for-command-injection&quot;&gt;Remediation Advice for Command Injection&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rangerscience&quot;&gt;Nicholas Barone&lt;/a&gt; added a note about using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shellescape&lt;/code&gt; to make shell commands safer.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1852&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;frozen-string-support&quot;&gt;Frozen String Support&lt;/h2&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/casperisfine&quot;&gt;Jean Boussier&lt;/a&gt;) has made Brakeman compatible with use of Ruby’s frozen string literals (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--enable-frozen-string-literal&lt;/code&gt;), avoiding any future issues if/when frozen strings are the default.&lt;/p&gt;

&lt;p&gt;Along the way, they also fixed up some Ruby warnings in the test suite.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1855&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Lots of great contributions in this release, thanks!</summary></entry><entry><title type="html">Brakeman 6.1.2 Released</title><link href="https://brakemanscanner.org/blog/2024/02/01/brakeman-6-dot-1-dot-2-released" rel="alternate" type="text/html" title="Brakeman 6.1.2 Released" /><published>2024-02-01T10:30:00-07:00</published><updated>2024-02-01T10:30:00-07:00</updated><id>https://brakemanscanner.org/blog/2024/02/01/brakeman-6-dot-1-dot-2-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2024/02/01/brakeman-6-dot-1-dot-2-released">&lt;p&gt;Finally, just a small release!&lt;/p&gt;

&lt;h2 id=&quot;components-in-render-paths&quot;&gt;Components in Render Paths&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/ElMassimo&quot;&gt;Máximo Mussini&lt;/a&gt; and &lt;a href=&quot;https://github.com/vividmuimui&quot;&gt;vividmuimui&lt;/a&gt;, there will be fewer false positives
warning about dynamic render paths when using components.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1805&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1821&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;performance-improvement-with-complex-branching&quot;&gt;Performance Improvement with Complex Branching&lt;/h2&gt;

&lt;p&gt;Brakeman has a very hard time with code like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# etc.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because to Brakeman it looks like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can quickly snowball into gigantic chunks of code, causing Brakeman to use lots of memory and essentially freeze up.&lt;/p&gt;

&lt;p&gt;In the past, limits on how many times a value is “branched” have helped with this (and is configurable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--branch-limit&lt;/code&gt;).
However, it is not sufficient.&lt;/p&gt;

&lt;p&gt;Now Brakeman has a limit on how large these chunks of code can get. This has improved performance without any noticable impact on true positives.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1820&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">Finally, just a small release!</summary></entry><entry><title type="html">Brakeman 6.1.0 Released</title><link href="https://brakemanscanner.org/blog/2023/12/04/brakeman-6-dot-1-dot-0-released" rel="alternate" type="text/html" title="Brakeman 6.1.0 Released" /><published>2023-12-04T22:30:00-07:00</published><updated>2023-12-04T22:30:00-07:00</updated><id>https://brakemanscanner.org/blog/2023/12/04/brakeman-6-dot-1-dot-0-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2023/12/04/brakeman-6-dot-1-dot-0-released">&lt;p&gt;It’s been a while!&lt;/p&gt;

&lt;h2 id=&quot;ransack-searches&quot;&gt;Ransack Searches&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://activerecord-hackery.github.io/ransack/&quot;&gt;Ransack&lt;/a&gt; is a popular library for enabling search against ActiveRecord attributes.&lt;/p&gt;

&lt;p&gt;It was originally intended for administrative interfaces (like those provided by ActiveAdmin).&lt;/p&gt;

&lt;p&gt;Use usually looks like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ransack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a url might look like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;example.com?q[make_start]=vol
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This might generate a query like&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cars&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;vol%&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The library does clever things with the query parameter key.
In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; is the column and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt; means match values that start with the search term
passed in.&lt;/p&gt;

&lt;p&gt;However, it’s also possible to specify columns on related tables, such as&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;example.com?q[owner_name_start]=just
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which would search the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; column on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;owners&lt;/code&gt; table (assuming &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car&lt;/code&gt; has an association to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Owner&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Prior to Ransack 4.0, the default configuration allowed searching &lt;em&gt;all&lt;/em&gt; columns on a table as
well as &lt;em&gt;all&lt;/em&gt; columns on associated tables.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://positive.security/blog/ransack-data-exfiltration&quot;&gt;Some folks figured out this can be used to extract secret values&lt;/a&gt; by brute-forcing the value one character at a time.&lt;/p&gt;

&lt;p&gt;To fix this issue, explicitly &lt;a href=&quot;https://activerecord-hackery.github.io/ransack/going-further/other-notes/#authorization-allowlistingdenylisting&quot;&gt;allow list the attributes and associations available&lt;/a&gt; to search.&lt;/p&gt;

&lt;p&gt;In Ransack 4.0 and later, it is required to set up an allowlist.&lt;/p&gt;

&lt;p&gt;Brakeman will warn about unrestricted use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ransack&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;High&lt;/strong&gt; if no allow-listing methods are found in the class hierarchy of the model on which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ransack&lt;/code&gt; is called&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Medium&lt;/strong&gt; if the use happens to be in a file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; in the path&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Low&lt;/strong&gt; if the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ransack&lt;/code&gt; is not on a class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1799&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;timing-output&quot;&gt;Timing Output&lt;/h2&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--timing&lt;/code&gt; to output duration of various steps during the scan.&lt;/p&gt;

&lt;p&gt;Useful for debugging slowness.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1801&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;another-sql-escaping-method&quot;&gt;Another SQL Escaping Method&lt;/h2&gt;

&lt;p&gt;Brakeman will not warn about use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escape_string&lt;/code&gt; in SQL queries.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1789&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;class-methods&quot;&gt;Class Methods&lt;/h2&gt;

&lt;p&gt;Brakeman will now treat methods defined inside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; as class methods.&lt;/p&gt;

&lt;p&gt;This does mean fingerprints of warnings found inside those methods will change.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1792&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;class-method-lookups&quot;&gt;Class Method Lookups&lt;/h2&gt;

&lt;p&gt;Searching for class method definitions in parent classes will now actually look for class methods, not instance methods.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1796&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;keyword-splats-in-filters&quot;&gt;Keyword Splats in Filters&lt;/h2&gt;

&lt;p&gt;Code like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will no longer cause an error.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1800&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s been a while!</summary></entry><entry><title type="html">Brakeman 6.0.1 Released</title><link href="https://brakemanscanner.org/blog/2023/07/20/brakeman-6-dot-0-dot-1-released" rel="alternate" type="text/html" title="Brakeman 6.0.1 Released" /><published>2023-07-20T13:30:00-06:00</published><updated>2023-07-20T13:30:00-06:00</updated><id>https://brakemanscanner.org/blog/2023/07/20/brakeman-6-dot-0-dot-1-released</id><content type="html" xml:base="https://brakemanscanner.org/blog/2023/07/20/brakeman-6-dot-0-dot-1-released">&lt;p&gt;Very tiny release this time!&lt;/p&gt;

&lt;h2 id=&quot;strings-for-load_defaults&quot;&gt;Strings for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_defaults&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;While the default for Rails generators and documentation is to use floats for versions, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load_defaults 6.1&lt;/code&gt;, internally it uses strings. It appears quite a few apps also use strings.&lt;/p&gt;

&lt;p&gt;Now Brakeman supports and uses strings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/1785&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;latest-rubyparser&quot;&gt;Latest RubyParser&lt;/h2&gt;

&lt;p&gt;Bundled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby_parser&lt;/code&gt; 3.20.3, which includes additional support for Ruby 3.2 syntax.&lt;/p&gt;</content><author><name></name></author><summary type="html">Very tiny release this time!</summary></entry></feed>